/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hourcalendar;

import hourcalendar.Base.Regles;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author admin
 */
public class ControlProgres extends javax.swing.JFrame {
    MainFrame finestra;
    /**
     * Creates new form ControlProgress
     */
    public ControlProgres(MainFrame finestra) {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        this.finestra = finestra;
        BarraProgres.setValue(50);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BarraProgres = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        NomProgres = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Progrés");

        BarraProgres.setToolTipText("");

        jLabel1.setText("Calculant:");

        NomProgres.setForeground(new java.awt.Color(0, 51, 255));
        NomProgres.setText("Inicialitzant...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NomProgres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(BarraProgres, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NomProgres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BarraProgres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar BarraProgres;
    private javax.swing.JLabel NomProgres;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    public void startControl() {
        System.out.println("START CONTROL");
        setVisible(true);
        repaint();
        update(getGraphics());
        Base base = HourCalendar.getBase();

        base.generador = new Generador(base.disponibilitatsHoraries.get(0), base.assignatures);
        //base.generador.setProgressBar(BarraProgres);
        base.nomProgres = "Grau Informàtica Q2";
        base.generador.execute();

        Generador generador = base.generador;
        NomProgres.setOpaque(true);
        
        while (generador == null) { generador = base.generador; }
        while (!generador.finalitzat) {
            int progresValue = (int)((base.progres / (float)Regles.ITERACIONS_GENERADOR.getInt()) * 100);
            if (BarraProgres.getValue() != progresValue) {
                BarraProgres.setValue(progresValue);
                BarraProgres.update(BarraProgres.getGraphics());
            }
            if (!NomProgres.getText().equals(base.nomProgres)) {
                NomProgres.setText(base.nomProgres);
                NomProgres.getUI().update(NomProgres.getGraphics(), NomProgres);
                NomProgres.repaint();
            }
        }
        System.out.println("END CONTROL");
        
        System.out.println(generador.getHorari().toString());
        base.disponibilitatsHoraries.add(generador.getHorari());
        
        
        Vector<DisponibilitatHoraria> disponibilitats = base.getDisponibilitatsHoraries();
        for (int idDisponibilitat = 0; idDisponibilitat < disponibilitats.size(); ++idDisponibilitat) {
            PanellHorari horari = new PanellHorari(disponibilitats.elementAt(idDisponibilitat));
            finestra.Contenidor.setViewportView(horari);
        }
        setVisible(false);
    }
}
